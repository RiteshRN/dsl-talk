
==================== FINAL INTERFACE ====================
2017-10-12 03:26:10.291333 UTC

interface dsl-0.1.0.0-HHwIOiy1Cqn9VRUNpv0S0h:Graph 8002
  interface hash: db0bc2562ba6c64c06a98d7ceb5c66c4
  ABI hash: 2b6008e8dd59404a9a5114e87ae469dc
  export-list hash: 02231a1c976255cc26fe1442f002335f
  orphan hash: 6dc62049f38d1587d358e1c77f01fb5d
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Graph.descendent
  Graph.initGraph
  Graph.mark
  Graph.trace'
  Graph.Colored{Graph.Colored marked node}
  Graph.Graph{Graph.Graph ancestors descendents visited}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
06a2efd992b39bc73676c8c7cccfe9cc
  $fShowColored :: GHC.Show.Show a => GHC.Show.Show (Graph.Colored a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Graph.Colored a)
                  (Graph.$fShowColored_$cshowsPrec @ a $dShow)
                  (Graph.$fShowColored_$cshow @ a $dShow)
                  (Graph.$fShowColored_$cshowList @ a $dShow) -}
fffe53311f0b059e8e651cf682600dff
  $fShowColored1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3cb2a0d29dbfe1f21d2fc2d1021e9e7a
  $fShowColored2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0e32c6736a7e7ded216018569cf467e2
  $fShowColored3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "marked = "#) -}
93ee5c55a851ae9d7dfa83e1d6e5575a
  $fShowColored4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
1f294788fbf83eb216a688aa510638c1
  $fShowColored5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "node = "#) -}
7d32b6a83360fdd0f42080cc5b81caab
  $fShowColored6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Colored {"#) -}
06a2efd992b39bc73676c8c7cccfe9cc
  $fShowColored_$cshow ::
    GHC.Show.Show a => Graph.Colored a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Graph.Colored a) ->
                 Graph.$fShowColored_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
06a2efd992b39bc73676c8c7cccfe9cc
  $fShowColored_$cshowList ::
    GHC.Show.Show a => [Graph.Colored a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Graph.Colored a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Graph.Colored a)
                   (Graph.$fShowColored_$cshowsPrec @ a $dShow Graph.$fShowColored1)
                   eta
                   eta1) -}
06a2efd992b39bc73676c8c7cccfe9cc
  $fShowColored_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Graph.Colored a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Graph.Colored a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Graph.Colored ww3 ww4 ->
                 Graph.$w$cshowsPrec @ a w ww1 ww3 ww4 } }) -}
3e5d3e39dbbb9686615867b1e9ed9a05
  $fShowGraph :: GHC.Show.Show a => GHC.Show.Show (Graph.Graph a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Graph.Graph a)
                  (Graph.$fShowGraph_$cshowsPrec @ a $dShow)
                  (Graph.$fShowGraph_$cshow @ a $dShow)
                  (Graph.$fShowGraph_$cshowList @ a $dShow) -}
ecd94f7cc4add00ea47bb54dd8e3a89e
  $fShowGraph1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "visited = "#) -}
735f53cc97a73a14589682fd8252a95e
  $fShowGraph2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "descendents = "#) -}
b8e19c66823c804dc4747bf226bb3738
  $fShowGraph3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ancestors = "#) -}
aa7601730a3bb356b71b9a3f5710a934
  $fShowGraph4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Graph {"#) -}
3e5d3e39dbbb9686615867b1e9ed9a05
  $fShowGraph_$cshow ::
    GHC.Show.Show a => Graph.Graph a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Graph.Graph a) ->
                 Graph.$fShowGraph_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3e5d3e39dbbb9686615867b1e9ed9a05
  $fShowGraph_$cshowList ::
    GHC.Show.Show a => [Graph.Graph a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Graph.Graph a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Graph.Graph a)
                   (Graph.$fShowGraph_$cshowsPrec @ a $dShow Graph.$fShowColored1)
                   eta
                   eta1) -}
3e5d3e39dbbb9686615867b1e9ed9a05
  $fShowGraph_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Graph.Graph a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Graph.Graph a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Graph.Graph ww3 ww4 ww5 ->
                 Graph.$w$cshowsPrec1 @ a w ww1 ww3 ww4 ww5 } }) -}
41ecd312a27eb4bdce6531af451a7d20
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                Graph.$sfromList_$s$wpoly_go4
                                  @ a
                                  y
                                  ds3
                                  ipv1
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  1# }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                Graph.$sfromList_$spoly_go4
                                  @ a
                                  y
                                  ds3
                                  ipv1
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)) } } } } } } } }) -}
97696324f38eab79093f39852c887eda
  $sfromList_$s$wpoly_go4 ::
    GHC.Prim.Int#
    -> a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><L,U> -}
16511d7b8d9a4c22ce29d55e2db84ab2
  $sfromList_$spoly_go4 ::
    GHC.Prim.Int#
    -> a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U> -}
530c6049d5baabb2e08b6234dd016666
  $tc'Colored :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15908977436019845719##
                   6761324985735836307##
                   Graph.$trModule
                   Graph.$tc'Colored1) -}
6684846338e038034b66086bfd979d53
  $tc'Colored1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Colored"#) -}
4c11fcce8372155caad867d834b4fa7e
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7461491956085080549##
                   13643500815640677120##
                   Graph.$trModule
                   Graph.$tc'Graph1) -}
8f42e91b005531c722ae85878aba073c
  $tc'Graph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Graph"#) -}
fe352df095f016dded12b1ea795df28d
  $tcColored :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2588318031830001947##
                   12862567380914799906##
                   Graph.$trModule
                   Graph.$tcColored1) -}
cdc564c2f6c43440052671c7117577fa
  $tcColored1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Colored"#) -}
0dcd0cc0ae2905150cd03cfa9d91b11e
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15846951039307898134##
                   8137183843654328859##
                   Graph.$trModule
                   Graph.$trModule1) -}
c55a7e222dcced42ce1536b16309627b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Graph.$trModule2 Graph.$trModule1) -}
362e2a198124e448d549d6e37732d0f3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Graph"#) -}
cb0f6e553ba799f967593aa5a03f7fc7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "dsl-0.1.0.0-HHwIOiy1Cqn9VRUNpv0S0h"#) -}
5d2ccbb7ffe1dd74e5727b4170f13290
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> a -> GHC.Types.Bool -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Graph.$fShowColored1 ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Graph.$fShowColored6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Graph.$fShowColored5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Graph.$fShowColored4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Graph.$fShowColored3
                                   (case ww2 of wild {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           GHC.Show.shows18
                                           (GHC.Base.++ @ GHC.Types.Char Graph.$fShowColored2 x)
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           GHC.Show.shows17
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Graph.$fShowColored2
                                              x) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
a01af91d88eaaa54ebd11aae14049f38
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Data.Map.Base.Map a a
    -> Data.Map.Base.Map a a
    -> Data.Map.Base.Map a GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A)><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Base.Map a a)
                   (ww2 :: Data.Map.Base.Map a a)
                   (ww3 :: Data.Map.Base.Map a GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec @ a @ a w w 0# ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec @ a @ a w w 0# ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ a
                       @ GHC.Types.Bool
                       w
                       GHC.Show.$fShowBool
                       0#
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Graph.$fShowGraph4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Graph.$fShowGraph3
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Graph.$fShowColored4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Graph.$fShowGraph2
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Graph.$fShowColored4
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Graph.$fShowGraph1
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Graph.$fShowColored2
                                                  x)))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
d217a57bc9407481adacccda9a4eec29
  $w$sgo4 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
f8d570e0333e78ad779338833dca5880
  $wdescendent ::
    GHC.Classes.Ord a =>
    a
    -> Data.Map.Base.Map a a
    -> Data.Map.Base.Map a GHC.Types.Bool
    -> GHC.Base.Maybe (Graph.Colored a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: a)
                   (ww :: Data.Map.Base.Map a a)
                   (ww1 :: Data.Map.Base.Map a GHC.Types.Bool) ->
                 case Data.Map.Base.lookup @ a @ a w w1 ww of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (Graph.Colored a)
                   GHC.Base.Just y
                   -> case Data.Map.Base.lookup
                             @ a
                             @ GHC.Types.Bool
                             w
                             y
                             ww1 of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Just
                             @ (Graph.Colored a)
                             (Graph.Colored @ a y GHC.Types.False)
                        GHC.Base.Just b
                        -> GHC.Base.Just
                             @ (Graph.Colored a)
                             (Graph.Colored @ a y b) } }) -}
76c169bfb6041a45839461868500b238
  $winitGraph ::
    GHC.Types.Int
    -> (# Data.Map.Base.Map GHC.Types.Int GHC.Types.Int,
          Data.Map.Base.Map GHC.Types.Int GHC.Types.Int,
          Data.Map.Base.Map GHC.Types.Int GHC.Types.Bool #)
  {- Arity: 1, Strictness: <L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) ->
                 (# case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.># 2# y) of wild {
                      GHC.Types.False
                      -> letrec {
                           go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ (x :: GHC.Prim.Int#) ->
                             GHC.Types.:
                               @ (GHC.Types.Int, GHC.Types.Int)
                               (GHC.Types.I# x, GHC.Types.I# (GHC.Prim.-# x 1#))
                               (case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild2 {
                                  GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                  GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) })
                         } in
                         Graph.$sfromList @ GHC.Types.Int (go 2#)
                      GHC.Types.True -> Graph.initGraph2 } },
                    case w of wild { GHC.Types.I# x ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.># 1# y) of wild1 {
                      GHC.Types.False
                      -> letrec {
                           go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ (x1 :: GHC.Prim.Int#) ->
                             GHC.Types.:
                               @ (GHC.Types.Int, GHC.Types.Int)
                               (GHC.Types.I# x1, GHC.Types.I# (GHC.Prim.+# x1 1#))
                               (case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y) of wild2 {
                                  GHC.Types.False -> go (GHC.Prim.+# x1 1#)
                                  GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) })
                         } in
                         Graph.$sfromList @ GHC.Types.Int (go 1#)
                      GHC.Types.True -> Graph.initGraph2 } },
                    case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.># 1# y) of wild {
                      GHC.Types.False
                      -> letrec {
                           go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Bool)]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ (x :: GHC.Prim.Int#) ->
                             GHC.Types.:
                               @ (GHC.Types.Int, GHC.Types.Bool)
                               (GHC.Types.I# x, GHC.Types.False)
                               (case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild2 {
                                  GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                  GHC.Types.True
                                  -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Bool) })
                         } in
                         Graph.$sfromList @ GHC.Types.Bool (go 1#)
                      GHC.Types.True -> Graph.initGraph1 } } #)) -}
06a2efd992b39bc73676c8c7cccfe9cc
  data Colored a = Colored {node :: a, marked :: GHC.Types.Bool}
3e5d3e39dbbb9686615867b1e9ed9a05
  type role Graph nominal
  data Graph a
    = Graph {ancestors :: Data.Map.Base.Map a a,
             descendents :: Data.Map.Base.Map a a,
             visited :: Data.Map.Base.Map a GHC.Types.Bool}
fa20f6b814f511aff4c5a37acd036e8c
  ancestors :: Graph.Graph a -> Data.Map.Base.Map a a
  RecSel Left Graph.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Graph.Graph a) ->
                 case ds of wild { Graph.Graph ds1 ds2 ds3 -> ds1 }) -}
0dab816a346bdcabe78a7e981081c1fc
  descendent ::
    GHC.Classes.Ord a =>
    a -> Graph.Graph a -> GHC.Base.Maybe (Graph.Colored a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S(LSL),1*U(A,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: a) (w2 :: Graph.Graph a) ->
                 case w2 of ww { Graph.Graph ww1 ww2 ww3 ->
                 Graph.$wdescendent @ a w w1 ww2 ww3 }) -}
97efb530801caebefb066d50cc1a6094
  descendents :: Graph.Graph a -> Data.Map.Base.Map a a
  RecSel Left Graph.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Graph.Graph a) ->
                 case ds of wild { Graph.Graph ds1 ds2 ds3 -> ds2 }) -}
628191ac9decfaaf08bc56562420cbbc
  initGraph :: GHC.Types.Int -> Graph.Graph GHC.Types.Int
  {- Arity: 1, Strictness: <L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case Graph.$winitGraph w of ww { (#,,#) ww1 ww2 ww3 ->
                 Graph.Graph @ GHC.Types.Int ww1 ww2 ww3 }) -}
ff9016e6564772343d41604608ef55de
  initGraph1 :: Data.Map.Base.Map GHC.Types.Int GHC.Types.Bool
  {- Unfolding: (Graph.$sfromList
                   @ GHC.Types.Bool
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Bool))) -}
289eb1119f6b281ec42c3408a1c2affa
  initGraph2 :: Data.Map.Base.Map GHC.Types.Int GHC.Types.Int
  {- Unfolding: (Graph.$sfromList
                   @ GHC.Types.Int
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
b39e2d0fafb67bb1a9c6b56e9ce83970
  mark :: GHC.Classes.Ord a => a -> Graph.Graph a -> Graph.Graph a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*U><S,1*U(U,U,1*U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: a)
                   (gr :: Graph.Graph a) ->
                 case gr of wild { Graph.Graph ds ds1 ds2 ->
                 Graph.Graph
                   @ a
                   ds
                   ds1
                   (Data.Map.Strict.insert
                      @ a
                      @ GHC.Types.Bool
                      $dOrd
                      x
                      GHC.Types.True
                      ds2) }) -}
c8e9e2441bb6ddf78491b85de53fa2db
  marked :: Graph.Colored a -> GHC.Types.Bool
  RecSel Left Graph.Colored
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Graph.Colored a) ->
                 case ds of wild { Graph.Colored ds1 ds2 -> ds2 }) -}
6be9d3da051a42c07db8eea9bb0ae42a
  node :: Graph.Colored a -> a
  RecSel Left Graph.Colored
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Graph.Colored a) ->
                 case ds of wild { Graph.Colored ds1 ds2 -> ds1 }) -}
178b52e52c6140cceb3052688b47fba3
  trace' :: GHC.Show.Show a => GHC.Base.String -> a -> a
  {- Arity: 3, Strictness: <L,1*U(A,1*C1(U),A)><L,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (s :: GHC.Base.String)
                   (x :: a) ->
                 Debug.Trace.trace
                   @ a
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         "; "#
                         (GHC.Show.show @ a $dShow x)))
                   x) -}
28b4d11b1f73a118dfa6c7ed5ee92e4f
  visited :: Graph.Graph a -> Data.Map.Base.Map a GHC.Types.Bool
  RecSel Left Graph.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Graph.Graph a) ->
                 case ds of wild { Graph.Graph ds1 ds2 ds3 -> ds3 }) -}
instance GHC.Show.Show [Graph.Colored] = Graph.$fShowColored
instance GHC.Show.Show [Graph.Graph] = Graph.$fShowGraph
"SPEC/Graph fromList @ Int _" [ALWAYS] forall @ a
                                              ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  Data.Map.Strict.fromList @ GHC.Types.Int @ a $dOrd
  = Graph.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

